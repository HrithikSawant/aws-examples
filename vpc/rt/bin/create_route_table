#!/usr/bin/env bash

# Function to show help message
show_help() {
    cat <<EOF
Usage: $0 <route-table-name> <vpc-id> <subnet-id(s)> [<destination-cidr> <gateway-id>]

Create a route table, associate it with one or more subnets, and optionally add a route.

Parameters:
  route-table-name   : The name of the route table to create (e.g., my-custom-routable).
  vpc-id             : The VPC ID where the route table will be created (e.g., vpc-xxxxxxxx).
  subnet-id(s)       : One or more subnet IDs to associate the route table with (e.g., subnet-xxxxxxxx subnet-yyyyyyyy).
  destination-cidr   : The destination CIDR block for the route (optional, e.g., 0.0.0.0/0).
  gateway-id         : The gateway ID for the route (optional, e.g., igw-xxxxxxxx).

Example 1: Creating and associating a route table with multiple subnets without adding a route:
  ./create-route-table.sh my-custom-routable vpc-xxxxxxxxxxxxxxxxx subnet-xxxxxxxxxxxxxxxxx subnet-xxxxxxxxxxxxxxxxx

Example 2: Creating, associating a route table with multiple subnets, and adding a route:
  ./create-route-table.sh my-custom-routable vpc-xxxxxxxxxxxxxxxxx subnet-xxxxxxxxxxxxxxxxx subnet-xxxxxxxxxxxxxxxxx 0.0.0.0/0 igw-xxxxxxxx

You can also set these values as environment variables (e.g., ROUTE_TABLE_NAME=..., VPC_ID=..., SUBNET_ID1=..., SUBNET_ID2=..., etc.).
EOF
}

# Check if help flag is set
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# Ensure route-table-name and vpc-id are provided
if [ -z "$1" ]; then
    read -p "Enter route table name: " ROUTE_TABLE_NAME
else
    ROUTE_TABLE_NAME=$1
fi

if [ -z "$2" ]; then
    read -p "Enter VPC ID (e.g., vpc-xxxxxxxx): " VPC_ID
else
    VPC_ID=$2
fi

# Ensure at least one subnet is provided
if [ -z "$3" ]; then
    read -p "Enter at least one Subnet ID (e.g., subnet-xxxxxxxx): " SUBNET_IDS
else
    SUBNET_IDS="${@:3}"
fi

# Prompt for optional destination CIDR and gateway ID
read -p "Enter destination CIDR block for route (e.g., 0.0.0.0/0) [optional]: " DEST_CIDR
read -p "Enter gateway ID for route (e.g., igw-xxxxxxxx) [optional]: " GATEWAY_ID

# Create the route table
echo "Creating route table '$ROUTE_TABLE_NAME' in VPC $VPC_ID..."
CREATE_RT_RESPONSE=$(aws ec2 create-route-table --vpc-id "$VPC_ID" --tag-specifications "ResourceType=route-table,Tags=[{Key=Name,Value=$ROUTE_TABLE_NAME}]")

# Check if the route table creation was successful
if [ $? -ne 0 ]; then
    echo "Error creating route table. Exiting."
    exit 1
fi

# Extract the Route Table ID from the response
ROUTE_TABLE_ID=$(echo "$CREATE_RT_RESPONSE" | jq -r '.RouteTable.RouteTableId')

echo "Route table created with ID: $ROUTE_TABLE_ID"

# Associate the route table with each provided subnet
for SUBNET_ID in $SUBNET_IDS; do
    echo "Associating route table with Subnet $SUBNET_ID..."
    aws ec2 associate-route-table --route-table-id "$ROUTE_TABLE_ID" --subnet-id "$SUBNET_ID"
    if [ $? -ne 0 ]; then
        echo "Error associating route table with subnet $SUBNET_ID."
    else
        echo "Route table successfully associated with subnet $SUBNET_ID."
    fi
done

# Optional: Add route if destination CIDR and gateway ID are provided
if [ ! -z "$DEST_CIDR" ] && [ ! -z "$GATEWAY_ID" ]; then
    echo "Adding route with destination $DEST_CIDR via gateway $GATEWAY_ID..."
    aws ec2 create-route --route-table-id "$ROUTE_TABLE_ID" --destination-cidr-block "$DEST_CIDR" --gateway-id "$GATEWAY_ID"
    if [ $? -eq 0 ]; then
        echo "Route successfully added."
    else
        echo "Error adding route."
    fi
else
    echo "No route added."
fi

echo "Script execution complete."

